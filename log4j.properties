###	log4j.rootLogger = [ level ] , appenderName1, appenderName2, …
###	level:是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
###	appenderName:就是指定日志信息输出到哪个地方。您可以同时指定多个输出目的地。
###	例如：log4j.rootLogger＝info,A1,B2,C3 配置了3个输出地方，这个名字可以任意（如上面的db）,但必须与我们在后面进行的设置名字对应；



### 配置根Logger ###
log4j.rootLogger = debug,stdout,D,E

### 输出到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} %5p %c{ 1 }:%L - %m%n

### 输出到日志文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = logs/log.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 保存异常信息到单独文件 ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.DatePattern='.'yyyy-MM-dd
log4j.appender.D.File = logs/error.log ## 异常日志文件名
log4j.appender.D.Append = true
log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

##======================================================================
Appender 为日志输出目的地，Log4j提供的appender有以下几种：
	org.apache.log4j.ConsoleAppender（控制台），
	org.apache.log4j.FileAppender（文件），
	org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
	org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
	org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
	
##======================================================================
Layout：日志输出格式，Log4j提供的layout有以下几种：
	org.apache.log4j.HTMLLayout（以HTML表格形式布局），
	org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
	org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
	org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

##======================================================================
Threshold  设置日志输出级别：
	log4j.appender.D.Threshold = DEBUG ## 输出DEBUG级别以上的日志
	log4j.appender.D.Threshold = ERROR ## 只输出ERROR级别以上的日志!!!

##======================================================================
DailyRollingFileAppender
	中可以指定monthly(每月)、 weekly(每周)、daily(每天)、half-daily(每半天)、hourly(每小时)和minutely(每分钟)六个频度
	'.'yyyy-MM,对应monthly(每月)
	'.'yyyy-ww,对应weekly(每周)
	'.'yyyy-MM-dd,对应daily(每天)
	'.'yyyy-MM-dd-a,对应half-daily(每半天)
	'.'yyyy-MM-dd-HH,对应hourly(每小时)
	'.'yyyy-MM-dd-HH-mm,对应minutely(每分钟)
	log4j.appender.file.DatePattern='.'yyyy-MM-dd
	log4j.appender.file.DatePattern='.'yyyy-MM-dd'.log'
	DatePattern中不用处理的文字要放到单引号(')中，如上面的(.)
##=================================================================================================================================
设置package输出级别
可以设置不同package的日志输出级别，语法为：
log4j.logger.packageName=level
其中，packageName为实际的包名，level为日志级别，例如：

复制代码代码如下:

log4j.logger.org.springframework=info
log4j.logger.org.apache.catalina=info
log4j.logger.org.apache.commons.digester.Digester=info
log4j.logger.org.apache.catalina.startup.TldConfig=info
log4j.logger.chb.test=debug






log4j.appender.downloadrecord=org.apache.log4j.DailyRollingFileAppender
log4j.appender.downloadrecord.File = /opt/applogs/downloadrecord/downloadrecord.log
log4j.appender.downloadrecord.Append = true
log4j.appender.downloadrecord.Threshold = WARN
log4j.appender.downloadrecord.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.downloadrecord.layout = org.apache.log4j.PatternLayout
log4j.appender.downloadrecord.layout.ConversionPattern =%m%n